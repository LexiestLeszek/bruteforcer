from time import time
from itertools import product
import string

def product_loop(password, generator):
    for p in generator:
        if ''.join(p) == password:
            print('\nPassword:', ''.join(p))
            return ''.join(p)
    return False

def load_password_set(filename):
    with open(filename, 'r') as file:
        return set(line.strip() for line in file)

def bruteforce(password):
    
    print('1. Comparing with most common passwords dictionary')
    
    # adding the content of a txt into a set to avoid duplicates and also make it work faster
    common_pass_set = load_password_set('dict_attack.txt')
    user_specific_set = load_password_set('user_spec_passwords.txt')
    # user spec passwords are passwords generated by combining user information
    
    if password in user_specific_set:
        print('\nPassword:', password)
        return password

    if password in common_pass_set:
        print('\nPassword:', password)
        return password
    
    print('2. Numbers cartesian product')
    for l in range(1, 8):
        generator = product(string.digits,repeat=int(l))
        print("\t..%d digit" % l)
        p = product_loop(password, generator)
        if p is not False:
            return p

    print('3. Numbers + ASCII lower')
    for l in range(1, 8):
        print("\t..%d char" % l)
        generator = product(string.digits + string.ascii_lowercase,repeat=int(l))
        p = product_loop(password, generator)
        if p is not False:
            return p

    print('4. Numbers + ASCII (lower,upper) + punctuation')
    all_char = string.digits + string.ascii_letters + string.punctuation
    for l in range(1, 8):
        print("\t..%d char" % l)
        generator = product(all_char, repeat=int(l))
        p = product_loop(password, generator)
        if p is not False:
            return p

if __name__ == "__main__":
    begin = time()
    bruteforce("Qwerty123")
    finish = time()
    print('Time spent to solve: %.2f secs' % (finish - begin))
    
